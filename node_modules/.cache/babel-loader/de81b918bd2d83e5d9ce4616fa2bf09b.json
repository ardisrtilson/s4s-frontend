{"ast":null,"code":"var _jsxFileName = \"/Users/ardisred/Workspace/samples4singles/s4s-frontend/src/components/sample/Crushes.js\";\n// Organized\nimport React, { useContext, useEffect, useState } from \"react\";\nimport { SampleContext } from \"./SampleProvider\";\nimport { Sample } from \"./Sample\";\nimport \"./Samples.css\";\nexport const Crushes = props => {\n  // Context \n  const {\n    favorites,\n    filterValue,\n    getCustomers,\n    getFavorites,\n    getSamples,\n    getUserFriends,\n    samples,\n    searchTerms,\n    setFilter,\n    userFriends\n  } = useContext(SampleContext); // State\n\n  const [filteredSamples, setFiltered] = useState([]); // Hooks\n\n  useEffect(() => {\n    getSamples();\n    getCustomers();\n    getUserFriends();\n    getFavorites();\n  }, []);\n  useEffect(() => {\n    let samplesToDisplay = samples;\n    let currentlyFiltered = samples;\n    const notUser = currentlyFiltered.filter(byUser => byUser.customerId != parseInt(localStorage.customer));\n    const userFaves = favorites.filter(faves => faves.customerId === parseInt(localStorage.customer));\n    const randInt = Math.floor(Math.random() * userFaves.length + 1);\n    samplesToDisplay = notUser.filter(currentSamples => {\n      return userFaves.some(favorite => favorite.sampleId === currentSamples.id);\n    });\n    setFiltered(samplesToDisplay);\n  }, [searchTerms, samples, filterValue]); // JSX\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"samples\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    class: \"sampleCard\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 17\n    }\n  }), filteredSamples.map(sample => {\n    return /*#__PURE__*/React.createElement(Sample, {\n      key: sample.id,\n      sample: sample,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 32\n      }\n    });\n  })));\n};","map":{"version":3,"sources":["/Users/ardisred/Workspace/samples4singles/s4s-frontend/src/components/sample/Crushes.js"],"names":["React","useContext","useEffect","useState","SampleContext","Sample","Crushes","props","favorites","filterValue","getCustomers","getFavorites","getSamples","getUserFriends","samples","searchTerms","setFilter","userFriends","filteredSamples","setFiltered","samplesToDisplay","currentlyFiltered","notUser","filter","byUser","customerId","parseInt","localStorage","customer","userFaves","faves","randInt","Math","floor","random","length","currentSamples","some","favorite","sampleId","id","map","sample"],"mappings":";AAAA;AACA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,SAA5B,EAAuCC,QAAvC,QAAuD,OAAvD;AACA,SAASC,aAAT,QAA8B,kBAA9B;AACA,SAASC,MAAT,QAAuB,UAAvB;AACA,OAAO,eAAP;AAEA,OAAO,MAAMC,OAAO,GAAIC,KAAD,IAAW;AAE9B;AAEA,QAAM;AAACC,IAAAA,SAAD;AACFC,IAAAA,WADE;AAEFC,IAAAA,YAFE;AAGFC,IAAAA,YAHE;AAIFC,IAAAA,UAJE;AAKFC,IAAAA,cALE;AAMFC,IAAAA,OANE;AAOFC,IAAAA,WAPE;AAQFC,IAAAA,SARE;AASFC,IAAAA;AATE,MAUFhB,UAAU,CAACG,aAAD,CAVd,CAJ8B,CAgB9B;;AAEA,QAAM,CAAEc,eAAF,EAAmBC,WAAnB,IAAmChB,QAAQ,CAAC,EAAD,CAAjD,CAlB8B,CAoB9B;;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACZU,IAAAA,UAAU;AACVF,IAAAA,YAAY;AACZG,IAAAA,cAAc;AACdF,IAAAA,YAAY;AACf,GALQ,EAKN,EALM,CAAT;AAOAT,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIkB,gBAAgB,GAAGN,OAAvB;AACA,QAAIO,iBAAiB,GAAGP,OAAxB;AAEQ,UAAMQ,OAAO,GAAGD,iBAAiB,CAACE,MAAlB,CAAyBC,MAAM,IAAIA,MAAM,CAACC,UAAP,IAAqBC,QAAQ,CAACC,YAAY,CAACC,QAAd,CAAhE,CAAhB;AACA,UAAMC,SAAS,GAAGrB,SAAS,CAACe,MAAV,CAAiBO,KAAK,IAAIA,KAAK,CAACL,UAAN,KAAqBC,QAAQ,CAACC,YAAY,CAACC,QAAd,CAAvD,CAAlB;AACA,UAAMG,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBL,SAAS,CAACM,MAA1B,GAAmC,CAA9C,CAAhB;AACAf,IAAAA,gBAAgB,GAAGE,OAAO,CAACC,MAAR,CAAea,cAAc,IAC5C;AAAC,aAAOP,SAAS,CAACQ,IAAV,CAAeC,QAAQ,IAC3BA,QAAQ,CAACC,QAAT,KAAsBH,cAAc,CAACI,EADjC,CAAP;AAC4C,KAF9B,CAAnB;AAIZrB,IAAAA,WAAW,CAACC,gBAAD,CAAX;AACC,GAZQ,EAYN,CAACL,WAAD,EAAcD,OAAd,EAAuBL,WAAvB,CAZM,CAAT,CA7B8B,CA2C9B;;AAEI,sBACI,uDACA;AAAK,IAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAK,IAAA,KAAK,EAAC,YAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAIQS,eAAe,CAACuB,GAAhB,CAAoBC,MAAM,IAAI;AAC1B,wBAAO,oBAAC,MAAD;AAAQ,MAAA,GAAG,EAAEA,MAAM,CAACF,EAApB;AAAwB,MAAA,MAAM,EAAEE,MAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACH,GAFD,CAJR,CADA,CADJ;AAaH,CA1DE","sourcesContent":["// Organized\nimport React, { useContext, useEffect, useState } from \"react\"\nimport { SampleContext } from \"./SampleProvider\"\nimport { Sample } from \"./Sample\"\nimport \"./Samples.css\"\n\nexport const Crushes = (props) => {\n\n    // Context \n\n    const {favorites, \n        filterValue, \n        getCustomers,\n        getFavorites,\n        getSamples,\n        getUserFriends, \n        samples, \n        searchTerms,\n        setFilter,\n        userFriends,\n    } = useContext(SampleContext)\n\n    // State\n\n    const [ filteredSamples, setFiltered ] = useState([])\n\n    // Hooks\n\n    useEffect(() => {\n        getSamples()\n        getCustomers()\n        getUserFriends()\n        getFavorites()\n    }, [])\n\n    useEffect(() => {\n        let samplesToDisplay = samples\n        let currentlyFiltered = samples\n\n                const notUser = currentlyFiltered.filter(byUser => byUser.customerId != parseInt(localStorage.customer))\n                const userFaves = favorites.filter(faves => faves.customerId === parseInt(localStorage.customer))\n                const randInt = Math.floor(Math.random() * userFaves.length + 1);\n                samplesToDisplay = notUser.filter(currentSamples => \n                    {return userFaves.some(favorite => \n                        favorite.sampleId === currentSamples.id)})\n   \n    setFiltered(samplesToDisplay)\n    }, [searchTerms, samples, filterValue])\n\n    // JSX\n\n        return (\n            <>\n            <div className=\"samples\">\n                <div class=\"sampleCard\">\n                        </div> \n                {\n                    filteredSamples.map(sample => {\n                        return <Sample key={sample.id} sample={sample} />\n                    })\n                }\n            </div> \n            </>\n        )\n    }"]},"metadata":{},"sourceType":"module"}