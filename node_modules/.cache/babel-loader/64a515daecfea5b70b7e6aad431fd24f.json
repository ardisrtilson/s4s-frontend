{"ast":null,"code":"var _jsxFileName = \"/Users/ardisred/Workspace/samples4singles/s4s-frontend/src/components/sample/SampleList.js\";\n// Organized\nimport React, { useContext, useEffect, useState } from \"react\";\nimport { SampleContext } from \"./SampleProvider\";\nimport { Sample } from \"./Sample\";\nimport \"./Samples.css\";\nexport const SampleList = props => {\n  // Context\n  const {\n    favorites,\n    filterValue,\n    getCustomers,\n    getFavorites,\n    getSamples,\n    samples,\n    searchTerms,\n    setFilter\n  } = useContext(SampleContext); // State\n\n  const [filteredSamples, setFiltered] = useState([]); // Hooks\n\n  useEffect(() => {\n    getSamples();\n  }, []);\n  useEffect(() => {\n    let samplesToDisplay = samples;\n    let currentlyFiltered = samples;\n    console.log(samples);\n    console.log(currentlyFiltered);\n\n    if (props.history.location.pathname === \"/\") {\n      samplesToDisplay = currentlyFiltered.filter(byUser => byUser.uploader === parseInt(localStorage.user_));\n      currentlyFiltered = samplesToDisplay;\n    }\n\n    if (props.history.location.pathname === \"/browse\") {\n      const notUser = currentlyFiltered.filter(byUser => byUser.customerId != parseInt(localStorage.customer));\n      samplesToDisplay = notUser;\n      currentlyFiltered = samplesToDisplay;\n    }\n\n    if (searchTerms !== \"\") {\n      samplesToDisplay = currentlyFiltered.filter(sample => sample.name.toLowerCase().includes(searchTerms));\n      currentlyFiltered = samplesToDisplay;\n    }\n\n    if (filterValue === \"2\" && props.history.location.pathname === \"/browse\") {\n      const notUser = currentlyFiltered.filter(byUser => byUser.customerId != parseInt(localStorage.customer));\n      const userFaves = favorites.filter(faves => faves.customerId === parseInt(localStorage.customer));\n      samplesToDisplay = notUser.filter(currentSamples => {\n        return userFaves.some(favorite => favorite.sampleId === currentSamples.id);\n      });\n    }\n\n    setFiltered(samplesToDisplay);\n  }, [searchTerms, samples, filterValue]); // JSX\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"samples\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    class: \"sampleCard\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 17\n    }\n  }), filteredSamples.map(sample => {\n    return /*#__PURE__*/React.createElement(Sample, {\n      key: sample.id,\n      sample: sample,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 32\n      }\n    });\n  })));\n};","map":{"version":3,"sources":["/Users/ardisred/Workspace/samples4singles/s4s-frontend/src/components/sample/SampleList.js"],"names":["React","useContext","useEffect","useState","SampleContext","Sample","SampleList","props","favorites","filterValue","getCustomers","getFavorites","getSamples","samples","searchTerms","setFilter","filteredSamples","setFiltered","samplesToDisplay","currentlyFiltered","console","log","history","location","pathname","filter","byUser","uploader","parseInt","localStorage","user_","notUser","customerId","customer","sample","name","toLowerCase","includes","userFaves","faves","currentSamples","some","favorite","sampleId","id","map"],"mappings":"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","sourcesContent":["// Organized\nimport React, { useContext, useEffect, useState } from \"react\"\nimport { SampleContext } from \"./SampleProvider\"\nimport { Sample } from \"./Sample\"\nimport \"./Samples.css\"\n\nexport const SampleList = (props) => {\n\n    // Context\n\n    const {favorites, \n        filterValue, \n        getCustomers,\n        getFavorites,\n        getSamples,\n        samples, \n        searchTerms,\n        setFilter,\n    } = useContext(SampleContext)\n\n    // State\n\n    const [ filteredSamples, setFiltered ] = useState([])\n\n    // Hooks\n\n    useEffect(() => {\n        getSamples()\n    }, [])\n    \n    useEffect(() => {\n        let samplesToDisplay = samples\n        let currentlyFiltered = samples\n        console.log(samples)\n        console.log(currentlyFiltered)\n\n            if (props.history.location.pathname === \"/\"){\n            samplesToDisplay = currentlyFiltered.filter(byUser => byUser.uploader === parseInt(localStorage.user_))\n            currentlyFiltered = samplesToDisplay\n            }\n\n            if (props.history.location.pathname === \"/browse\"){\n                const notUser = currentlyFiltered.filter(byUser => byUser.customerId != parseInt(localStorage.customer))\n                samplesToDisplay = notUser\n                currentlyFiltered = samplesToDisplay\n                }\n\n            if (searchTerms !== \"\") {\n                samplesToDisplay = currentlyFiltered.filter(sample => sample.name.toLowerCase().includes(searchTerms))\n                currentlyFiltered = samplesToDisplay\n            }\n\n            if (filterValue === \"2\" && props.history.location.pathname === \"/browse\"){\n                const notUser = currentlyFiltered.filter(byUser => byUser.customerId != parseInt(localStorage.customer))\n                const userFaves = favorites.filter(faves => faves.customerId === parseInt(localStorage.customer))\n                samplesToDisplay = notUser.filter(currentSamples => \n                    {return userFaves.some(favorite => \n                        favorite.sampleId === currentSamples.id)})\n            }\n   \n    setFiltered(samplesToDisplay)\n    }, [searchTerms, samples, filterValue])\n\n    // JSX\n\n        return (\n            <>\n            <div className=\"samples\">\n                <div class=\"sampleCard\">\n                        </div> \n                {\n                    filteredSamples.map(sample => {\n                        return <Sample key={sample.id} sample={sample} />\n                    })\n                }\n            </div> \n            </>\n        )\n}"]},"metadata":{},"sourceType":"module"}