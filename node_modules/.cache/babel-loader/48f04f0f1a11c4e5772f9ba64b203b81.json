{"ast":null,"code":"var _jsxFileName = \"/Users/ardisred/Workspace/samples4singles/s4s-frontend/src/components/sample/SampleDetail.js\";\nimport React, { useRef, useContext, useEffect, useState } from \"react\";\nimport { SampleContext } from \"./SampleProvider\";\nimport \"./Samples.css\";\nexport const SampleDetails = props => {\n  const [sample, setSample] = useState({});\n  const {\n    addComment,\n    commentValue,\n    getUsers,\n    users,\n    getComments,\n    getSampleById,\n    releaseComment,\n    releaseSample\n  } = useContext(SampleContext); // Declarations \n\n  useEffect(() => {\n    getComments();\n    getUsers();\n    const sampleId = parseInt(props.match.params.sampleId);\n    getSampleById(sampleId);\n    console.log(sample);\n  }, []);\n  const user = users.find(user => user.id === sample.uploader) || {};\n  const theseComments = commentValue.filter(comment => sample.id === comment.sampleId);\n  const userComment = useRef(null);\n  const isUser = sample.user_id === parseInt(localStorage.getItem(\"user_number\"));\n  const foundUser = users.find(user => user.id === parseInt(localStorage.getItem(\"user_number\"))) || {};\n  const currentUserName = foundUser.name; // Functions\n\n  const addCommentToApi = () => {\n    let commenterName = users.find(user => user.id === parseInt(localStorage.getItem(\"user_number\")));\n    addComment({\n      sampleId: sample.id,\n      userId: commenterName.name,\n      comment: userComment.current.value\n    }).then(getComments);\n    userComment.current.value = \"\";\n  };\n\n  if (isUser === true) {\n    return /*#__PURE__*/React.createElement(\"section\", {\n      className: \"sample\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      className: \"sample__name\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 21\n      }\n    }, sample.name, \" by \", user.name, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => releaseSample(sample.id).then(() => props.history.push(\"/browse\")),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 78\n      }\n    }, \"Delete Sample\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"sample__description\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 58\n      }\n    }, \"Description:\"), sample.description), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"sample__submitter\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 21\n      }\n    }, \" \", /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 57\n      }\n    }, \"Comments:\"), theseComments.map(comment => {\n      if (currentUserName === comment.userId) {\n        return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"fieldset\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 25\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          className: \"comment__user\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 25\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 25\n          }\n        }, comment.userId), /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 25\n          }\n        }, comment.comment), /*#__PURE__*/React.createElement(\"button\", {\n          onClick: () => releaseComment(comment.id),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 25\n          }\n        }, \"Delete Comment\"))));\n      } else {\n        return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"fieldset\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 29\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          className: \"comment__user\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 29\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 29\n          }\n        }, comment.userId), /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 29\n          }\n        }, comment.comment))));\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"entry__field\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      ref: userComment,\n      id: \"sampleName\",\n      required: true,\n      autoFocus: true,\n      className: \"form-control\",\n      placeholder: \"Enter Comment\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: addCommentToApi,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 21\n      }\n    }, \"Add Comment\")));\n  } else {\n    return /*#__PURE__*/React.createElement(\"section\", {\n      className: \"sample\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      className: \"sample__name\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 21\n      }\n    }, sample.name, \" by \", user.name), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"sample__description\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 21\n      }\n    }, sample.description), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"sample__submitter\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 21\n      }\n    }, \" \", /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 57\n      }\n    }, \"Comments:\"), theseComments.map(comment => {\n      if (currentUserName === comment.userId) {\n        return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"fieldset\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 25\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          className: \"comment__user\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 25\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 25\n          }\n        }, comment.userId), /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 25\n          }\n        }, comment.comment), /*#__PURE__*/React.createElement(\"button\", {\n          onClick: () => releaseComment(comment.id),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 25\n          }\n        }, \"Delete Comment\"))));\n      } else {\n        return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"fieldset\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 29\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          className: \"comment__user\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 29\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 29\n          }\n        }, comment.userId), /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 29\n          }\n        }, comment.comment))));\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"entry__field\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      ref: userComment,\n      id: \"sampleName\",\n      required: true,\n      autoFocus: true,\n      className: \"form-control\",\n      placeholder: \"Enter Comment\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: addCommentToApi,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 21\n      }\n    }, \"Add Comment\")));\n  }\n};","map":{"version":3,"sources":["/Users/ardisred/Workspace/samples4singles/s4s-frontend/src/components/sample/SampleDetail.js"],"names":["React","useRef","useContext","useEffect","useState","SampleContext","SampleDetails","props","sample","setSample","addComment","commentValue","getUsers","users","getComments","getSampleById","releaseComment","releaseSample","sampleId","parseInt","match","params","console","log","user","find","id","uploader","theseComments","filter","comment","userComment","isUser","user_id","localStorage","getItem","foundUser","currentUserName","name","addCommentToApi","commenterName","userId","current","value","then","history","push","description","map"],"mappings":"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","sourcesContent":["import React, { useRef, useContext, useEffect, useState } from \"react\"\nimport { SampleContext } from \"./SampleProvider\"\nimport \"./Samples.css\"\n\nexport const SampleDetails = (props) => {\n\n    const [sample, setSample] = useState({})\n\n    const {\n        addComment,\n        commentValue,\n        getUsers,\n        users,\n        getComments,\n        getSampleById,\n        releaseComment,\n        releaseSample\n        } = useContext(SampleContext)\n    // Declarations \n\n    useEffect(() => {\n        getComments()\n        getUsers()\n        const sampleId = parseInt(props.match.params.sampleId)\n        getSampleById(sampleId)\n        console.log(sample)\n    }, [])\n\n    const user = users.find(user => user.id === sample.uploader) || {}\n    const theseComments = commentValue.filter(comment => sample.id === comment.sampleId)\n    const userComment = useRef(null)\n    const isUser = sample.user_id === parseInt(localStorage.getItem(\"user_number\"))\n    const foundUser = users.find(user => user.id === parseInt(localStorage.getItem(\"user_number\"))) || {}\n    const currentUserName = foundUser.name\n\n\n    // Functions\n\n        const addCommentToApi = () => {\n            let commenterName = users.find(user => user.id === parseInt(localStorage.getItem(\"user_number\")))\n            addComment({\n                sampleId: sample.id,\n                userId: commenterName.name,\n                comment: userComment.current.value\n            }).then(getComments)\n            userComment.current.value = \"\"\n        }\n\n        if (isUser === true){\n        return (\n                <section className=\"sample\">\n                    <h3 className=\"sample__name\">{sample.name} by {user.name}<button onClick={() => releaseSample(sample.id).then(() => props.history.push(\"/browse\"))} >Delete Sample</button></h3>\n                    <div className=\"sample__description\"><h3>Description:</h3>{sample.description}</div>\n                    <div className=\"sample__submitter\"> <h3>Comments:</h3>{\n                        theseComments.map(comment => {\n                        if (currentUserName === comment.userId){\n                        return <>\n                        <fieldset>\n                        <div className= \"comment__user\">\n                        <div>{comment.userId}</div>\n                        <div>{comment.comment}</div>\n                        <button onClick={() => releaseComment(comment.id)}>Delete Comment</button>\n                        </div>\n                        </fieldset>\n                        </>\n                        }\n                        else {\n                            return <>\n                            <fieldset>\n                            <div className= \"comment__user\">\n                            <div>{comment.userId}</div>\n                            <div>{comment.comment}</div>\n                            </div>\n                            </fieldset>\n                            </>\n                            }\n                        })}\n                </div>\n                    <div className=\"entry__field\">\n                    <input type=\"text\" ref={userComment} id=\"sampleName\" required autoFocus className=\"form-control\" placeholder=\"Enter Comment\" />\n                    <button onClick={addCommentToApi}>Add Comment</button>\n                    </div>\n                </section>\n        )\n    } \n        else{\n            return (\n                <section className=\"sample\">\n                    <h3 className=\"sample__name\">{sample.name} by {user.name}</h3>\n                    <div className=\"sample__description\">{sample.description}</div>\n                    <div className=\"sample__submitter\"> <h3>Comments:</h3>{\n                        theseComments.map(comment => {\n                        if (currentUserName === comment.userId){\n                        return <>\n                        <fieldset>\n                        <div className= \"comment__user\">\n                        <div>{comment.userId}</div>\n                        <div>{comment.comment}</div>\n                        <button onClick={() => releaseComment(comment.id)}>Delete Comment</button>\n                        </div>\n                        </fieldset>\n                        </>\n                        }\n                        else {\n                            return <>\n                            <fieldset>\n                            <div className= \"comment__user\">\n                            <div>{comment.userId}</div>\n                            <div>{comment.comment}</div>\n                            </div>\n                            </fieldset>\n                            </>\n                            }\n                        })}\n                </div>\n                    <div className=\"entry__field\">\n                    <input type=\"text\" ref={userComment} id=\"sampleName\" required autoFocus className=\"form-control\" placeholder=\"Enter Comment\" />\n                    <button onClick={addCommentToApi}>Add Comment</button>\n                    </div>\n                </section>\n        )}\n    }"]},"metadata":{},"sourceType":"module"}