{"ast":null,"code":"var _jsxFileName = \"/Users/ardisred/Workspace/samples4singles/s4s-frontend/src/components/sample/SampleDetail.js\";\nimport React, { useRef, useContext, useEffect, useState } from \"react\";\nimport { SampleContext } from \"./SampleProvider\";\nimport \"./Samples.css\";\nimport 'react-h5-audio-player/lib/styles.css';\nexport const SampleDetails = props => {\n  // Declarations \n  const customerName = customers.find(customer => customer.id === sample.customerId) || {};\n  const theseComments = commentValue.filter(comment => sample.id === comment.sampleId);\n  const userComment = useRef(null);\n  const isUser = sample.customerId === parseInt(localStorage.getItem(\"customer\"));\n  const foundUser = customers.find(customer => customer.id === parseInt(localStorage.getItem(\"customer\"))) || {};\n  const currentUserName = foundUser.name; // Context\n\n  const {\n    addComment,\n    commentValue,\n    customers,\n    getComments,\n    getCustomers,\n    getSampleById,\n    releaseComment,\n    releaseSample\n  } = useContext(SampleContext); // State\n\n  const [sample, setSample] = useState({}); // Hooks\n\n  useEffect(() => {\n    getCustomers();\n    getComments();\n    const sampleId = parseInt(props.match.params.sampleId);\n    getSampleById(sampleId).then(setSample);\n  }, []); // Functions\n\n  const addCommentToApi = () => {\n    let commenterName = customers.find(customer => customer.id === parseInt(localStorage.getItem(\"customer\")));\n    addComment({\n      sampleId: sample.id,\n      userId: commenterName.name,\n      comment: userComment.current.value\n    }).then(getComments);\n    userComment.current.value = \"\";\n  };\n\n  if (isUser === true) {\n    return /*#__PURE__*/React.createElement(\"section\", {\n      className: \"sample\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      className: \"sample__name\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 21\n      }\n    }, sample.name, \" by \", customerName.name, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => releaseSample(sample.id).then(() => props.history.push(\"/browse\")),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 86\n      }\n    }, \"Delete Sample\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"sample__description\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 58\n      }\n    }, \"Description:\"), sample.description), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"sample__submitter\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 21\n      }\n    }, \" \", /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 57\n      }\n    }, \"Comments:\"), theseComments.map(comment => {\n      if (currentUserName === comment.userId) {\n        return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"fieldset\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 25\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          className: \"comment__user\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 25\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 25\n          }\n        }, comment.userId), /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 25\n          }\n        }, comment.comment), /*#__PURE__*/React.createElement(\"button\", {\n          onClick: () => releaseComment(comment.id),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 25\n          }\n        }, \"Delete Comment\"))));\n      } else {\n        return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"fieldset\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 29\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          className: \"comment__user\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 29\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 29\n          }\n        }, comment.userId), /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 29\n          }\n        }, comment.comment))));\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"entry__field\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      ref: userComment,\n      id: \"sampleName\",\n      required: true,\n      autoFocus: true,\n      className: \"form-control\",\n      placeholder: \"Enter Comment\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: addCommentToApi,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 21\n      }\n    }, \"Add Comment\")));\n  } else {\n    return /*#__PURE__*/React.createElement(\"section\", {\n      className: \"sample\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      className: \"sample__name\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 21\n      }\n    }, sample.name, \" by \", customerName.name), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"sample__description\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 21\n      }\n    }, sample.description), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"sample__submitter\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 21\n      }\n    }, \" \", /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 57\n      }\n    }, \"Comments:\"), theseComments.map(comment => {\n      if (currentUserName === comment.userId) {\n        return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"fieldset\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 25\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          className: \"comment__user\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 25\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 25\n          }\n        }, comment.userId), /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 25\n          }\n        }, comment.comment), /*#__PURE__*/React.createElement(\"button\", {\n          onClick: () => releaseComment(comment.id),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 25\n          }\n        }, \"Delete Comment\"))));\n      } else {\n        return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"fieldset\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 29\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          className: \"comment__user\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 29\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 29\n          }\n        }, comment.userId), /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 29\n          }\n        }, comment.comment))));\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"entry__field\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      ref: userComment,\n      id: \"sampleName\",\n      required: true,\n      autoFocus: true,\n      className: \"form-control\",\n      placeholder: \"Enter Comment\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: addCommentToApi,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 21\n      }\n    }, \"Add Comment\")));\n  }\n};","map":{"version":3,"sources":["/Users/ardisred/Workspace/samples4singles/s4s-frontend/src/components/sample/SampleDetail.js"],"names":["React","useRef","useContext","useEffect","useState","SampleContext","SampleDetails","props","customerName","customers","find","customer","id","sample","customerId","theseComments","commentValue","filter","comment","sampleId","userComment","isUser","parseInt","localStorage","getItem","foundUser","currentUserName","name","addComment","getComments","getCustomers","getSampleById","releaseComment","releaseSample","setSample","match","params","then","addCommentToApi","commenterName","userId","current","value","history","push","description","map"],"mappings":"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","sourcesContent":["import React, { useRef, useContext, useEffect, useState } from \"react\"\nimport { SampleContext } from \"./SampleProvider\"\nimport \"./Samples.css\"\nimport 'react-h5-audio-player/lib/styles.css';\n\nexport const SampleDetails = (props) => {\n\n    // Declarations \n\n    const customerName = customers.find(customer => customer.id === sample.customerId) || {}\n    const theseComments = commentValue.filter(comment => sample.id === comment.sampleId)\n    const userComment = useRef(null)\n    const isUser = sample.customerId === parseInt(localStorage.getItem(\"customer\"))\n    const foundUser = customers.find(customer => customer.id === parseInt(localStorage.getItem(\"customer\"))) || {}\n    const currentUserName = foundUser.name\n\n    // Context\n\n    const {\n        addComment,\n        commentValue,\n        customers, \n        getComments,\n        getCustomers,\n        getSampleById,\n        releaseComment,\n        releaseSample\n        } = useContext(SampleContext)\n\n    // State\n\n    const [sample, setSample] = useState({})\n\n    // Hooks\n\n    useEffect(() => {\n        getCustomers()\n        getComments()\n        const sampleId = parseInt(props.match.params.sampleId)\n        getSampleById(sampleId)\n            .then(setSample)\n    }, [])\n\n    // Functions\n    \n        const addCommentToApi = () => {\n            let commenterName = customers.find(customer => customer.id === parseInt(localStorage.getItem(\"customer\")))\n            addComment({\n                sampleId: sample.id,\n                userId: commenterName.name,\n                comment: userComment.current.value\n            }).then(getComments)\n            userComment.current.value = \"\"\n        }\n\n        if (isUser === true){\n        return (\n                <section className=\"sample\">\n                    <h3 className=\"sample__name\">{sample.name} by {customerName.name}<button onClick={() => releaseSample(sample.id).then(() => props.history.push(\"/browse\"))} >Delete Sample</button></h3>\n                    <div className=\"sample__description\"><h3>Description:</h3>{sample.description}</div>\n                    <div className=\"sample__submitter\"> <h3>Comments:</h3>{\n                        theseComments.map(comment => {\n                        if (currentUserName === comment.userId){\n                        return <>\n                        <fieldset>\n                        <div className= \"comment__user\">\n                        <div>{comment.userId}</div>\n                        <div>{comment.comment}</div>\n                        <button onClick={() => releaseComment(comment.id)}>Delete Comment</button>\n                        </div>\n                        </fieldset>\n                        </>\n                        }\n                        else {\n                            return <>\n                            <fieldset>\n                            <div className= \"comment__user\">\n                            <div>{comment.userId}</div>\n                            <div>{comment.comment}</div>\n                            </div>\n                            </fieldset>\n                            </>\n                            }\n                        })}\n                </div>\n                    <div className=\"entry__field\">\n                    <input type=\"text\" ref={userComment} id=\"sampleName\" required autoFocus className=\"form-control\" placeholder=\"Enter Comment\" />\n                    <button onClick={addCommentToApi}>Add Comment</button>\n                    </div>\n                </section>\n        )\n    } \n        else{\n            return (\n                <section className=\"sample\">\n                    <h3 className=\"sample__name\">{sample.name} by {customerName.name}</h3>\n                    <div className=\"sample__description\">{sample.description}</div>\n                    <div className=\"sample__submitter\"> <h3>Comments:</h3>{\n                        theseComments.map(comment => {\n                        if (currentUserName === comment.userId){\n                        return <>\n                        <fieldset>\n                        <div className= \"comment__user\">\n                        <div>{comment.userId}</div>\n                        <div>{comment.comment}</div>\n                        <button onClick={() => releaseComment(comment.id)}>Delete Comment</button>\n                        </div>\n                        </fieldset>\n                        </>\n                        }\n                        else {\n                            return <>\n                            <fieldset>\n                            <div className= \"comment__user\">\n                            <div>{comment.userId}</div>\n                            <div>{comment.comment}</div>\n                            </div>\n                            </fieldset>\n                            </>\n                            }\n                        })}\n                </div>\n                    <div className=\"entry__field\">\n                    <input type=\"text\" ref={userComment} id=\"sampleName\" required autoFocus className=\"form-control\" placeholder=\"Enter Comment\" />\n                    <button onClick={addCommentToApi}>Add Comment</button>\n                    </div>\n                </section>\n        )}\n    }"]},"metadata":{},"sourceType":"module"}