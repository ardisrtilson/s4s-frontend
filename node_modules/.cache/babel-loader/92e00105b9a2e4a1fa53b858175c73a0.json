{"ast":null,"code":"var _jsxFileName = \"/Users/ardisred/Workspace/samples4singles/s4s-frontend/src/components/browse/BrowseSamples.js\";\n// Organized\nimport React, { useContext, useEffect, useState } from \"react\";\nimport { SampleContext } from \"../sample/SampleProvider\";\nimport { Browse } from \"./Browse\";\nimport \"./Browse.css\";\nimport 'react-h5-audio-player/lib/styles.css';\nexport const BrowseSamples = props => {\n  // Context\n  const {\n    favorites,\n    filterValue,\n    getCustomers,\n    getFavorites,\n    getSamples,\n    samples,\n    searchTerms,\n    setFilter\n  } = useContext(SampleContext); // State \n\n  const [filteredSamples, setFiltered] = useState([]); // Hooks\n\n  useEffect(() => {\n    getSamples().then(() => {\n      getCustomers().then(() => {\n        getFavorites().then(() => {\n          let samplesToDisplay = samples;\n          let randomSample = samples;\n          let currentlyFiltered = samples;\n          const notUser = currentlyFiltered.filter(byUser => byUser.customerId != parseInt(localStorage.customer)); // const userFaves = favorites.filter(faves => faves.customerId === parseInt(localStorage.customer))\n\n          toGetRandom;\n          let notFaves = [];\n          console.log(samples);\n          console.log(notUser);\n          console.log(userFaves);\n          let finalArray = [];\n          notUser.forEach(nu => {\n            userFaves.forEach(uf => {\n              if (nu.id !== uf.id) {\n                notFaves.push(nu);\n              }\n            });\n          });\n          const randInt = Math.floor(Math.random() * notUser.length + 1);\n          randomSample = [notFaves.find(randomSample => randomSample.id == randInt)];\n          samplesToDisplay = notUser.filter(currentSamples => {\n            return userFaves.some(favorite => favorite.sampleId === currentSamples.id);\n          });\n          console.log(notFaves);\n          setFiltered(randomSample);\n        });\n      });\n    });\n  }, []); // JSX\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"samples\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    class: \"sampleCard\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 17\n    }\n  }), filteredSamples.map(sample => {\n    return /*#__PURE__*/React.createElement(Browse, {\n      key: sample.id,\n      sample: sample,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 32\n      }\n    });\n  })));\n};","map":{"version":3,"sources":["/Users/ardisred/Workspace/samples4singles/s4s-frontend/src/components/browse/BrowseSamples.js"],"names":["React","useContext","useEffect","useState","SampleContext","Browse","BrowseSamples","props","favorites","filterValue","getCustomers","getFavorites","getSamples","samples","searchTerms","setFilter","filteredSamples","setFiltered","then","samplesToDisplay","randomSample","currentlyFiltered","notUser","filter","byUser","customerId","parseInt","localStorage","customer","toGetRandom","notFaves","console","log","userFaves","finalArray","forEach","nu","uf","id","push","randInt","Math","floor","random","length","find","currentSamples","some","favorite","sampleId","map","sample"],"mappings":"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","sourcesContent":["// Organized\nimport React, { useContext, useEffect, useState } from \"react\"\nimport { SampleContext } from \"../sample/SampleProvider\"\nimport { Browse } from \"./Browse\"\nimport \"./Browse.css\"\nimport 'react-h5-audio-player/lib/styles.css'\n\nexport const BrowseSamples = (props) => {\n\n    // Context\n    const {favorites, \n        filterValue, \n        getCustomers,\n        getFavorites,\n        getSamples,\n        samples, \n        searchTerms,\n        setFilter,\n    } = useContext(SampleContext)\n    \n    // State \n\n    const [ filteredSamples, setFiltered ] = useState([])\n\n    // Hooks\n\n    useEffect(() => {\n        getSamples().then(() => {\n        getCustomers().then(() => {\n        getFavorites().then(() => {\n        let samplesToDisplay = samples\n        let randomSample = samples\n        let currentlyFiltered = samples\n                const notUser = currentlyFiltered.filter(byUser => byUser.customerId != parseInt(localStorage.customer))\n                // const userFaves = favorites.filter(faves => faves.customerId === parseInt(localStorage.customer))\n                toGetRandom\n                let notFaves = []\n                console.log(samples)\n                console.log(notUser)\n                console.log(userFaves)\n\n                let finalArray = []\n                notUser.forEach(nu => {\n                    userFaves.forEach(uf => {\n                        if (nu.id !== uf.id){\n                                notFaves.push(nu)\n                            }\n                        }\n                )})\n\n                \n\n                const randInt = Math.floor(Math.random() * notUser.length + 1)\n                randomSample = [notFaves.find(randomSample => randomSample.id == randInt)]\n                \n                samplesToDisplay = notUser.filter(currentSamples => \n                    {return userFaves.some(favorite => \n                        favorite.sampleId === currentSamples.id)})\n    console.log(notFaves)\n    setFiltered(randomSample)\n    })})})}, [])\n\n    // JSX\n\n        return (\n            <>\n            <div className=\"samples\">\n                <div class=\"sampleCard\">\n                        </div> \n                {\n                    filteredSamples.map(sample => {\n                        return <Browse key={sample.id} sample={sample} />\n                    })\n                }\n            </div> \n            </>     \n        )\n    }"]},"metadata":{},"sourceType":"module"}