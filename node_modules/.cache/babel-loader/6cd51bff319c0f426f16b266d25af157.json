{"ast":null,"code":"var _jsxFileName = \"/Users/ardisred/Workspace/samples4singles/s4s-frontend/src/components/sample/SampleList.js\";\n// Organized\nimport React, { useContext, useEffect, useState } from \"react\";\nimport { SampleContext } from \"./SampleProvider\";\nimport { Sample } from \"./Sample\";\nimport \"./Samples.css\";\nexport const SampleList = props => {\n  // Context\n  const {\n    favorites,\n    filterValue,\n    getSamples,\n    samples,\n    searchTerms,\n    getUsers,\n    user,\n    getUserById\n  } = useContext(SampleContext); // State\n\n  let currentUser = parseInt(localStorage.getItem(\"user_number\"));\n  const [filteredSamples, setFiltered] = useState([]);\n  const [imageUrl, setImageUrl] = useState(\"\"); // Hooks\n\n  useEffect(() => {\n    getSamples();\n    getUsers();\n    getUserById(currentUser);\n    console.log(user);\n  }, []);\n  useEffect(() => {\n    let samplesToDisplay = samples;\n    let currentlyFiltered = samples;\n\n    if (props.history.location.pathname === \"/\") {\n      samplesToDisplay = currentlyFiltered.filter(byUser => byUser.uploader === parseInt(localStorage.user_number));\n      currentlyFiltered = samplesToDisplay;\n    }\n\n    if (props.history.location.pathname === \"/browse\") {\n      const notUser = currentlyFiltered.filter(byUser => byUser.customerId != parseInt(localStorage.customer));\n      samplesToDisplay = notUser;\n      currentlyFiltered = samplesToDisplay;\n    }\n\n    if (searchTerms !== \"\") {\n      samplesToDisplay = currentlyFiltered.filter(sample => sample.name.toLowerCase().includes(searchTerms));\n      currentlyFiltered = samplesToDisplay;\n    }\n\n    if (filterValue === \"2\" && props.history.location.pathname === \"/browse\") {\n      const notUser = currentlyFiltered.filter(byUser => byUser.customerId != parseInt(localStorage.customer));\n      const userFaves = favorites.filter(faves => faves.customerId === parseInt(localStorage.customer));\n      samplesToDisplay = notUser.filter(currentSamples => {\n        return userFaves.some(favorite => favorite.sampleId === currentSamples.id);\n      });\n    }\n\n    setFiltered(samplesToDisplay);\n  }, [searchTerms, samples, filterValue]); // JSX\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"img\", {\n    src: user.profile_image_url,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"samples\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    class: \"sampleCard\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 17\n    }\n  }), filteredSamples.map(sample => {\n    return /*#__PURE__*/React.createElement(Sample, {\n      key: sample.id,\n      sample: sample,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 32\n      }\n    });\n  })));\n};","map":{"version":3,"sources":["/Users/ardisred/Workspace/samples4singles/s4s-frontend/src/components/sample/SampleList.js"],"names":["React","useContext","useEffect","useState","SampleContext","Sample","SampleList","props","favorites","filterValue","getSamples","samples","searchTerms","getUsers","user","getUserById","currentUser","parseInt","localStorage","getItem","filteredSamples","setFiltered","imageUrl","setImageUrl","console","log","samplesToDisplay","currentlyFiltered","history","location","pathname","filter","byUser","uploader","user_number","notUser","customerId","customer","sample","name","toLowerCase","includes","userFaves","faves","currentSamples","some","favorite","sampleId","id","profile_image_url","map"],"mappings":"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","sourcesContent":["// Organized\nimport React, { useContext, useEffect, useState } from \"react\"\nimport { SampleContext } from \"./SampleProvider\"\nimport { Sample } from \"./Sample\"\nimport \"./Samples.css\"\n\nexport const SampleList = (props) => {\n\n    // Context\n\n    const {favorites, \n        filterValue, \n        getSamples,\n        samples, \n        searchTerms,\n        getUsers,\n        user,\n        getUserById,\n    } = useContext(SampleContext)\n\n    // State\n    let currentUser = parseInt(localStorage.getItem(\"user_number\"))\n    const [ filteredSamples, setFiltered ] = useState([])\n    const [ imageUrl, setImageUrl] = useState(\"\")\n\n    // Hooks\n\n    useEffect(() => {\n        getSamples()\n        getUsers()\n        getUserById(currentUser)\n        console.log(user)\n    }, [])\n    \n    useEffect(() => {\n        let samplesToDisplay = samples\n        let currentlyFiltered = samples\n\n            if (props.history.location.pathname === \"/\"){\n            samplesToDisplay = currentlyFiltered.filter(byUser => byUser.uploader === parseInt(localStorage.user_number))\n            currentlyFiltered = samplesToDisplay\n            }\n\n            if (props.history.location.pathname === \"/browse\"){\n                const notUser = currentlyFiltered.filter(byUser => byUser.customerId != parseInt(localStorage.customer))\n                samplesToDisplay = notUser\n                currentlyFiltered = samplesToDisplay\n                }\n\n            if (searchTerms !== \"\") {\n                samplesToDisplay = currentlyFiltered.filter(sample => sample.name.toLowerCase().includes(searchTerms))\n                currentlyFiltered = samplesToDisplay\n            }\n\n            if (filterValue === \"2\" && props.history.location.pathname === \"/browse\"){\n                const notUser = currentlyFiltered.filter(byUser => byUser.customerId != parseInt(localStorage.customer))\n                const userFaves = favorites.filter(faves => faves.customerId === parseInt(localStorage.customer))\n                samplesToDisplay = notUser.filter(currentSamples => \n                    {return userFaves.some(favorite => \n                        favorite.sampleId === currentSamples.id)})\n            }\n   \n    setFiltered(samplesToDisplay)\n    }, [searchTerms, samples, filterValue])\n\n    // JSX\n\n        return (\n            <>\n            <img src={user.profile_image_url}></img>\n            <div className=\"samples\">\n                <div class=\"sampleCard\">\n                        </div> \n                {\n                    filteredSamples.map(sample => {\n                        return <Sample key={sample.id} sample={sample} />\n                    })\n                }\n            </div>\n            </>\n        )\n}"]},"metadata":{},"sourceType":"module"}