{"ast":null,"code":"var _jsxFileName = \"/Users/ardisred/Workspace/samples4singles/s4s-frontend/src/components/crushes/Crushes.js\";\n// Organized\nimport React, { useContext, useEffect, useState } from \"react\";\nimport { SampleContext } from \"../sample/SampleProvider\";\nimport { CrushPanel } from \"./CrushPanel\";\nimport \"./Samples.css\";\nimport 'react-h5-audio-player/lib/styles.css';\nexport const Crushes = props => {\n  // Context \n  const {\n    favorites,\n    filterValue,\n    getUsers,\n    getFavorites,\n    getSamples,\n    samples,\n    searchTerms\n  } = useContext(SampleContext); // State\n\n  const [filteredSamples, setFiltered] = useState([]); // Hooks\n\n  useEffect(() => {\n    getSamples();\n    getUsers();\n    getFavorites();\n  }, []);\n  useEffect(() => {\n    let currentlyFiltered = samples;\n    const notUser = currentlyFiltered.filter(byUser => byUser.user_id != parseInt(localStorage.customer));\n    const userFaves = favorites.filter(faves => faves.customerId === parseInt(localStorage.customer));\n    let samplesToDisplay = notUser.filter(currentSamples => {\n      return userFaves.some(favorite => favorite.sampleId === currentSamples.id);\n    });\n    setFiltered(samplesToDisplay);\n  }, [searchTerms, samples, filterValue]); // JSX\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"samples\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    class: \"sampleCard\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 17\n    }\n  }), filteredSamples.map(sample => {\n    return /*#__PURE__*/React.createElement(CrushPanel, {\n      key: sample.id,\n      sample: sample,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 32\n      }\n    });\n  })));\n};","map":{"version":3,"sources":["/Users/ardisred/Workspace/samples4singles/s4s-frontend/src/components/crushes/Crushes.js"],"names":["React","useContext","useEffect","useState","SampleContext","CrushPanel","Crushes","props","favorites","filterValue","getUsers","getFavorites","getSamples","samples","searchTerms","filteredSamples","setFiltered","currentlyFiltered","notUser","filter","byUser","user_id","parseInt","localStorage","customer","userFaves","faves","customerId","samplesToDisplay","currentSamples","some","favorite","sampleId","id","map","sample"],"mappings":";AAAA;AACA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,SAA5B,EAAuCC,QAAvC,QAAuD,OAAvD;AACA,SAASC,aAAT,QAA8B,0BAA9B;AACA,SAASC,UAAT,QAA2B,cAA3B;AACA,OAAO,eAAP;AACA,OAAO,sCAAP;AAEA,OAAO,MAAMC,OAAO,GAAIC,KAAD,IAAW;AAE9B;AAEA,QAAM;AAACC,IAAAA,SAAD;AACFC,IAAAA,WADE;AAEFC,IAAAA,QAFE;AAGFC,IAAAA,YAHE;AAIFC,IAAAA,UAJE;AAKFC,IAAAA,OALE;AAMFC,IAAAA;AANE,MAOFb,UAAU,CAACG,aAAD,CAPd,CAJ8B,CAa9B;;AAEA,QAAM,CAAEW,eAAF,EAAmBC,WAAnB,IAAmCb,QAAQ,CAAC,EAAD,CAAjD,CAf8B,CAiB9B;;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACZU,IAAAA,UAAU;AACVF,IAAAA,QAAQ;AACRC,IAAAA,YAAY;AACf,GAJQ,EAIN,EAJM,CAAT;AAMAT,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIe,iBAAiB,GAAGJ,OAAxB;AAEQ,UAAMK,OAAO,GAAGD,iBAAiB,CAACE,MAAlB,CAAyBC,MAAM,IAAIA,MAAM,CAACC,OAAP,IAAkBC,QAAQ,CAACC,YAAY,CAACC,QAAd,CAA7D,CAAhB;AACA,UAAMC,SAAS,GAAGjB,SAAS,CAACW,MAAV,CAAiBO,KAAK,IAAIA,KAAK,CAACC,UAAN,KAAqBL,QAAQ,CAACC,YAAY,CAACC,QAAd,CAAvD,CAAlB;AACA,QAAII,gBAAgB,GAAGV,OAAO,CAACC,MAAR,CAAeU,cAAc,IAChD;AAAC,aAAOJ,SAAS,CAACK,IAAV,CAAeC,QAAQ,IAC3BA,QAAQ,CAACC,QAAT,KAAsBH,cAAc,CAACI,EADjC,CAAP;AAC4C,KAF1B,CAAvB;AAIZjB,IAAAA,WAAW,CAACY,gBAAD,CAAX;AACC,GAVQ,EAUN,CAACd,WAAD,EAAcD,OAAd,EAAuBJ,WAAvB,CAVM,CAAT,CAzB8B,CAqC9B;;AAEI,sBACI,uDACA;AAAK,IAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAK,IAAA,KAAK,EAAC,YAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAIQM,eAAe,CAACmB,GAAhB,CAAoBC,MAAM,IAAI;AAC1B,wBAAO,oBAAC,UAAD;AAAY,MAAA,GAAG,EAAEA,MAAM,CAACF,EAAxB;AAA4B,MAAA,MAAM,EAAEE,MAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACH,GAFD,CAJR,CADA,CADJ;AAaH,CApDE","sourcesContent":["// Organized\nimport React, { useContext, useEffect, useState } from \"react\"\nimport { SampleContext } from \"../sample/SampleProvider\"\nimport { CrushPanel } from \"./CrushPanel\"\nimport \"./Samples.css\"\nimport 'react-h5-audio-player/lib/styles.css'\n\nexport const Crushes = (props) => {\n\n    // Context \n\n    const {favorites, \n        filterValue, \n        getUsers,\n        getFavorites,\n        getSamples,\n        samples, \n        searchTerms,\n    } = useContext(SampleContext)\n\n    // State\n\n    const [ filteredSamples, setFiltered ] = useState([])\n\n    // Hooks\n\n    useEffect(() => {\n        getSamples()\n        getUsers()\n        getFavorites()\n    }, [])\n\n    useEffect(() => {\n        let currentlyFiltered = samples\n\n                const notUser = currentlyFiltered.filter(byUser => byUser.user_id != parseInt(localStorage.customer))\n                const userFaves = favorites.filter(faves => faves.customerId === parseInt(localStorage.customer))\n                let samplesToDisplay = notUser.filter(currentSamples => \n                    {return userFaves.some(favorite => \n                        favorite.sampleId === currentSamples.id)})\n   \n    setFiltered(samplesToDisplay)\n    }, [searchTerms, samples, filterValue])\n\n    // JSX\n\n        return (\n            <>\n            <div className=\"samples\">\n                <div class=\"sampleCard\">\n                        </div> \n                {\n                    filteredSamples.map(sample => {\n                        return <CrushPanel key={sample.id} sample={sample} />\n                    })\n                }\n            </div> \n            </>\n        )\n    }"]},"metadata":{},"sourceType":"module"}