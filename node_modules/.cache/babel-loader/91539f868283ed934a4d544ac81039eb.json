{"ast":null,"code":"var _jsxFileName = \"/Users/ardisred/Workspace/samples4singles/s4s-frontend/src/components/sample/SampleList.js\";\n// Organized\nimport React, { useContext, useEffect, useState } from \"react\";\nimport { SampleContext } from \"./SampleProvider\";\nimport { Sample } from \"./Sample\";\nimport \"./Samples.css\";\nimport AudioPlayer from 'react-h5-audio-player';\nimport 'react-h5-audio-player/lib/styles.css';\nexport const SampleList = props => {\n  // Context\n  const {\n    favorites,\n    filterValue,\n    getCustomers,\n    getFavorites,\n    getSamples,\n    getUserFriends,\n    samples,\n    searchTerms,\n    setFilter,\n    userFriends\n  } = useContext(SampleContext); // State\n\n  const [filteredSamples, setFiltered] = useState([]); // Hooks\n\n  useEffect(() => {\n    getSamples();\n    getCustomers();\n    getUserFriends();\n    getFavorites();\n    setFilter(\"0\");\n  }, []);\n  useEffect(() => {\n    let samplesToDisplay = samples;\n    let allUserFriends = findFriends();\n    let currentlyFiltered = samples;\n\n    if (props.history.location.pathname === \"/\") {\n      samplesToDisplay = currentlyFiltered.filter(byUser => byUser.customerId === parseInt(localStorage.customer));\n      currentlyFiltered = samplesToDisplay;\n    }\n\n    if (props.history.location.pathname === \"/browse\") {\n      const notUser = currentlyFiltered.filter(byUser => byUser.customerId != parseInt(localStorage.customer));\n      samplesToDisplay = notUser;\n      currentlyFiltered = samplesToDisplay;\n    }\n\n    if (searchTerms !== \"\") {\n      samplesToDisplay = currentlyFiltered.filter(sample => sample.name.toLowerCase().includes(searchTerms));\n      currentlyFiltered = samplesToDisplay;\n    }\n\n    if (filterValue === \"1\" && props.history.location.pathname === \"/browse\") {\n      const notUser = currentlyFiltered.filter(byUser => byUser.customerId != parseInt(localStorage.customer));\n      samplesToDisplay = notUser.filter(byFriend => allUserFriends.includes(byFriend.customerId));\n    }\n\n    if (filterValue === \"2\" && props.history.location.pathname === \"/browse\") {\n      const notUser = currentlyFiltered.filter(byUser => byUser.customerId != parseInt(localStorage.customer));\n      const userFaves = favorites.filter(faves => faves.customerId === parseInt(localStorage.customer));\n      samplesToDisplay = notUser.filter(currentSamples => {\n        return userFaves.some(favorite => favorite.sampleId === currentSamples.id);\n      });\n    }\n\n    setFiltered(samplesToDisplay);\n  }, [searchTerms, samples, filterValue]); // Functions\n\n  const findFriends = () => {\n    let currentUserId = parseInt(localStorage.customer);\n    let currentRelationships = userFriends.filter(f => {\n      if (currentUserId === f.userId || currentUserId === f.friendId) {\n        return f;\n      }\n    });\n    let friendIds = currentRelationships.map(r => {\n      if (r.userId === currentUserId) {\n        return r.friendId;\n      } else {\n        return r.userId;\n      }\n    });\n    friendIds.push(currentUserId);\n    return friendIds;\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"samples\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    class: \"sampleCard\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 17\n    }\n  }), filteredSamples.map(sample => {\n    return /*#__PURE__*/React.createElement(Sample, {\n      key: sample.id,\n      sample: sample,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 32\n      }\n    });\n  })));\n};","map":{"version":3,"sources":["/Users/ardisred/Workspace/samples4singles/s4s-frontend/src/components/sample/SampleList.js"],"names":["React","useContext","useEffect","useState","SampleContext","Sample","AudioPlayer","SampleList","props","favorites","filterValue","getCustomers","getFavorites","getSamples","getUserFriends","samples","searchTerms","setFilter","userFriends","filteredSamples","setFiltered","samplesToDisplay","allUserFriends","findFriends","currentlyFiltered","history","location","pathname","filter","byUser","customerId","parseInt","localStorage","customer","notUser","sample","name","toLowerCase","includes","byFriend","userFaves","faves","currentSamples","some","favorite","sampleId","id","currentUserId","currentRelationships","f","userId","friendId","friendIds","map","r","push"],"mappings":"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","sourcesContent":["// Organized\nimport React, { useContext, useEffect, useState } from \"react\"\nimport { SampleContext } from \"./SampleProvider\"\nimport { Sample } from \"./Sample\"\nimport \"./Samples.css\"\nimport AudioPlayer from 'react-h5-audio-player'\nimport 'react-h5-audio-player/lib/styles.css'\n\nexport const SampleList = (props) => {\n\n    // Context\n\n    const {favorites, \n        filterValue, \n        getCustomers,\n        getFavorites,\n        getSamples,\n        getUserFriends, \n        samples, \n        searchTerms,\n        setFilter,\n        userFriends,\n    } = useContext(SampleContext)\n\n    // State\n\n    const [ filteredSamples, setFiltered ] = useState([])\n\n    // Hooks\n\n    useEffect(() => {\n        getSamples()\n        getCustomers()\n        getUserFriends()\n        getFavorites()\n        setFilter(\"0\")\n    }, [])\n    \n    useEffect(() => {\n        let samplesToDisplay = samples\n        let allUserFriends = findFriends()\n        let currentlyFiltered = samples\n\n            if (props.history.location.pathname === \"/\"){\n            samplesToDisplay = currentlyFiltered.filter(byUser => byUser.customerId === parseInt(localStorage.customer))\n            currentlyFiltered = samplesToDisplay\n            }\n\n            if (props.history.location.pathname === \"/browse\"){\n                const notUser = currentlyFiltered.filter(byUser => byUser.customerId != parseInt(localStorage.customer))\n                samplesToDisplay = notUser\n                currentlyFiltered = samplesToDisplay\n                }\n\n            if (searchTerms !== \"\") {\n                samplesToDisplay = currentlyFiltered.filter(sample => sample.name.toLowerCase().includes(searchTerms))\n                currentlyFiltered = samplesToDisplay\n            }\n\n            if (filterValue === \"1\" && props.history.location.pathname === \"/browse\"){\n                const notUser = currentlyFiltered.filter(byUser => byUser.customerId != parseInt(localStorage.customer))\n                samplesToDisplay = notUser.filter(byFriend => allUserFriends.includes(byFriend.customerId))\n            }\n\n            if (filterValue === \"2\" && props.history.location.pathname === \"/browse\"){\n                const notUser = currentlyFiltered.filter(byUser => byUser.customerId != parseInt(localStorage.customer))\n                const userFaves = favorites.filter(faves => faves.customerId === parseInt(localStorage.customer))\n                samplesToDisplay = notUser.filter(currentSamples => \n                    {return userFaves.some(favorite => \n                        favorite.sampleId === currentSamples.id)})\n            }\n   \n    setFiltered(samplesToDisplay)\n    }, [searchTerms, samples, filterValue])\n\n    // Functions\n\n    const findFriends = () => {\n        let currentUserId = parseInt(localStorage.customer)\n        let currentRelationships = userFriends.filter(f => {\n            if (currentUserId === f.userId || currentUserId === f.friendId) {\n                return f\n            }\n        })\n        let friendIds = currentRelationships.map(r => {\n            if (r.userId === currentUserId) {\n                return r.friendId\n            } else {\n                return r.userId\n            }\n        })\n        friendIds.push(currentUserId)\n        return friendIds\n}\n\n        return (\n            <>\n            <div className=\"samples\">\n                <div class=\"sampleCard\">\n                        </div> \n                {\n                    filteredSamples.map(sample => {\n                        return <Sample key={sample.id} sample={sample} />\n                    })\n                }\n            </div> \n            </>\n        )\n    }"]},"metadata":{},"sourceType":"module"}