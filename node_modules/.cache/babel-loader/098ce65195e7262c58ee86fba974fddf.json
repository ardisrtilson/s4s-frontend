{"ast":null,"code":"module.exports = {\n  hexValueSanitize: function (color) {\n    return color.replace(/^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i, (m, r, g, b) => r + r + g + g + b + b).replace('#', '');\n  },\n  hexToDec: function (hex) {\n    return parseInt((hex + '').replace(/[^a-f0-9]/gi, ''), 16);\n  },\n  decToHex: function (number) {\n    return number < 0 ? 0xFFFFFFFF + number + 1 : parseInt(number, 10).toString(16);\n  },\n  hexToRgb: function (hex) {\n    hex = this.hexValueSanitize(hex);\n    return hex.length == 3 ? [this.hexToDec(hex[0] + hex[0]), this.hexToDec(hex[1] + hex[1]), this.hexToDec(hex[2] + hex[2])] : [this.hexToDec(hex[0] + hex[1]), this.hexToDec(hex[2] + hex[3]), this.hexToDec(hex[4] + hex[5])];\n  },\n  hexBrightness: function (hex, type) {\n    let conversion;\n\n    if (type == 'BT601') {\n      conversion = [0.299, 0.587, 0.114]; //BT601\n    } else if (type == 'BT709') {\n      conversion = [0.2126, 0.7152, 0.0722]; //BT709\n    } else if (type == 'BT2020') {\n      conversion = [0.2627, 0.6780, 0.0593]; //BT2020\n    } else {\n      conversion = [0.299, 0.587, 0.114]; //BT601\n    }\n\n    ;\n    hex = this.hexValueSanitize(hex);\n    return this.hexToDec(hex[0] + hex[1]) * conversion[0] + this.hexToDec(hex[2] + hex[3]) * conversion[1] + this.hexToDec(hex[4] + hex[5]) * conversion[2];\n  },\n  rgbToHsv: function (color) {\n    let r = color[0] / 255;\n    let g = color[1] / 255;\n    let b = color[2] / 255;\n    let h, s, min, max, del, dR, dG, dB, hsl;\n    hsl = [];\n    min = Math.min(r, g, b);\n    max = Math.max(r, g, b);\n    del = max - min;\n\n    if (del == 0) {\n      h = 0;\n      s = 0;\n    } else {\n      s = del / max;\n      dR = ((max - r) / 6 + del / 2) / del;\n      dG = ((max - g) / 6 + del / 2) / del;\n      dB = ((max - b) / 6 + del / 2) / del;\n\n      if (r == max) {\n        h = dB - dG;\n      } else if (g == max) {\n        h = 1 / 3 + dR - dB;\n      } else if (b == max) {\n        h = 2 / 3 + dG - dR;\n      }\n\n      ;\n\n      if (h < 0) {\n        h++;\n      }\n\n      ;\n\n      if (h > 1) {\n        h--;\n      }\n\n      ;\n    }\n\n    ;\n    hsl['h'] = h;\n    hsl['s'] = s;\n    hsl['v'] = 0.9;\n    return hsl;\n  },\n  hexToHsv: function (hex) {\n    let rgb, hsv;\n    hex = this.hexValueSanitize(hex);\n    rgb = this.hexToRgb(hex);\n    hsv = this.rgbToHsv(rgb);\n    return hsv;\n  },\n  mostBrightColor: function (colors, type) {\n    let mostBright = false;\n    let hex;\n    colors.forEach(color => {\n      hex = this.hexValueSanitize(color);\n      brightness = this.hexBrightness(hex, type);\n\n      if (!mostBright || this.hexBrightness(hex, type) > this.hexBrightness(mostBright, type)) {\n        mostBright = hex;\n      }\n\n      ;\n    });\n    return `#${mostBright}`;\n  },\n  mostSaturatedColor: function (colors) {\n    let mostSaturated = false;\n    let hex, hsv, saturation, oldHsv;\n    colors.forEach(color => {\n      hex = this.hexValueSanitize(color);\n      hsv = this.hexToHsv(hex);\n      saturation = hsv['s'];\n\n      if (mostSaturated) {\n        oldHsv = this.hexToHsv(mostSaturated);\n      }\n\n      ;\n\n      if (!mostSaturated || saturation > oldHsv['s']) {\n        mostSaturated = hex;\n      }\n\n      ;\n    });\n    return `#${mostSaturated}`;\n  },\n  colorMixer: function (hex1, hex2, percent) {\n    hex1 = this.hexValueSanitize(hex1);\n    hex2 = this.hexValueSanitize(hex2);\n\n    if (hex1.length == 3) {\n      hex1 = hex1.repeat(hex1[0], 2) + hex1.repeat(hex1[1], 2) + hex1.repeat(hex1[2], 2);\n    }\n\n    ;\n\n    if (hex2.length == 3) {\n      hex2 = hex2.repeat(hex2[0], 2) + hex2.repeat(hex2[1], 2) + hex2.repeat(hex2[2], 2);\n    }\n\n    ;\n    let red_hex = this.decToHex((percent * this.hexToDec(hex1[0] + hex1[1]) + (100 - percent) * this.hexToDec(hex2[0] + hex2[1])) / 100).padStart(2, '0');\n    let green_hex = this.decToHex((percent * this.hexToDec(hex1[2] + hex1[3]) + (100 - percent) * this.hexToDec(hex2[2] + hex2[3])) / 100).padStart(2, '0');\n    let blue_hex = this.decToHex((percent * this.hexToDec(hex1[4] + hex1[5]) + (100 - percent) * this.hexToDec(hex2[4] + hex2[5])) / 100).padStart(2, '0');\n    return `#${red_hex + green_hex + blue_hex}`;\n  },\n  sortColors: function (colors, type) {\n    const input = colors.slice(0);\n    const output = [];\n\n    while (input.length > 0) {\n      const color = this[type](input);\n      let index = input.indexOf(color);\n\n      if (index > -1) {\n        input.splice(index, 1);\n      }\n\n      output.push(color);\n    }\n\n    return output;\n  },\n  mixSortColors: function (colors, type, mixcolor, percentage) {\n    const input = colors.slice(0);\n    const output = [];\n\n    while (input.length > 0) {\n      const color = this[type](input);\n      let index = input.indexOf(color);\n\n      if (index > -1) {\n        input.splice(index, 1);\n      }\n\n      output.push(this.colorMixer(color, mixcolor, percentage));\n    }\n\n    return output;\n  }\n};","map":{"version":3,"sources":["/Users/ardisred/Workspace/samples4singles/s4s-frontend/node_modules/hexsorter/hexSorter.js"],"names":["module","exports","hexValueSanitize","color","replace","m","r","g","b","hexToDec","hex","parseInt","decToHex","number","toString","hexToRgb","length","hexBrightness","type","conversion","rgbToHsv","h","s","min","max","del","dR","dG","dB","hsl","Math","hexToHsv","rgb","hsv","mostBrightColor","colors","mostBright","forEach","brightness","mostSaturatedColor","mostSaturated","saturation","oldHsv","colorMixer","hex1","hex2","percent","repeat","red_hex","padStart","green_hex","blue_hex","sortColors","input","slice","output","index","indexOf","splice","push","mixSortColors","mixcolor","percentage"],"mappings":"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","sourcesContent":["module.exports = {\n    hexValueSanitize: function(color) {\n        return color.replace(/^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i\n        ,(m, r, g, b) => r + r + g + g + b + b).replace('#', '');\n    },\n    hexToDec: function(hex) {\n        return parseInt((hex + '').replace(/[^a-f0-9]/gi, ''), 16);\n    },\n    decToHex: function(number) {\n        return number < 0 ? 0xFFFFFFFF + number + 1 : parseInt(number, 10).toString(16);\n    },\n    hexToRgb: function(hex) {\n        hex = this.hexValueSanitize(hex);\n        return hex.length == 3 ? [this.hexToDec(hex[0] + hex[0]), this.hexToDec(hex[1] + hex[1]), this.hexToDec(hex[2] + hex[2])] : [this.hexToDec(hex[0] + hex[1]), this.hexToDec(hex[2] + hex[3]), this.hexToDec(hex[4] + hex[5])];\n    },\n    hexBrightness: function(hex, type) {\n        let conversion;\n\n        if (type == 'BT601') {\n            conversion = [0.299, 0.587, 0.114]; //BT601\n        } else if (type == 'BT709') {\n            conversion = [0.2126, 0.7152, 0.0722]; //BT709\n        } else if (type == 'BT2020') {\n            conversion = [0.2627, 0.6780, 0.0593]; //BT2020\n        } else {\n            conversion = [0.299, 0.587, 0.114]; //BT601\n        };\n\n        hex = this.hexValueSanitize(hex);\n\n        return (this.hexToDec(hex[0] + hex[1]) * conversion[0] + this.hexToDec(hex[2] + hex[3]) * conversion[1] + this.hexToDec(hex[4] + hex[5]) * conversion[2]);\n    },\n    rgbToHsv: function(color) {\n        let r = color[0] / 255;\n        let g = color[1] / 255;\n        let b = color[2] / 255;\n\n        let h,s,min,max,del,dR,dG,dB,hsl;\n\n        hsl = [];\n\n        min = Math.min(r, g, b);\n        max = Math.max(r, g, b);\n        del = max - min;\n\n        if (del == 0) {\n            h = 0;\n            s = 0;\n        } else {\n            s = del / max;\n\n            dR = (((max - r) / 6) + (del / 2)) / del;\n            dG = (((max - g) / 6) + (del / 2)) / del;\n            dB = (((max - b) / 6) + (del / 2)) / del;\n\n            if (r == max) {\n                h = dB - dG;\n            } else if (g == max) {\n                h = (1 / 3) + dR - dB;\n            } else if (b == max) {\n                h = (2 / 3) + dG - dR;\n            };\n\n            if (h < 0) {\n                h++;\n            };\n\n            if (h > 1) {\n                h--;\n            };\n        };\n\n        hsl['h'] = h;\n        hsl['s'] = s;\n        hsl['v'] = 0.9;\n\n        return hsl;\n    },\n    hexToHsv: function(hex) {\n        let rgb, hsv;\n\n        hex = this.hexValueSanitize(hex);\n\n        rgb = this.hexToRgb(hex);\n        hsv = this.rgbToHsv(rgb);\n\n        return hsv;\n    },\n    mostBrightColor: function(colors, type) {\n        let mostBright = false;\n        let hex;\n\n        colors.forEach((color) => {\n            hex = this.hexValueSanitize(color);\n\n            brightness = this.hexBrightness(hex, type);\n            if (!mostBright || this.hexBrightness(hex, type) > this.hexBrightness(mostBright, type)) {\n                mostBright = hex;\n            };\n        });\n\n        return `#${mostBright}`;\n    },\n    mostSaturatedColor: function(colors) {\n        let mostSaturated = false;\n        let hex, hsv, saturation, oldHsv;\n\n        colors.forEach((color) => {\n            hex = this.hexValueSanitize(color);\n            hsv = this.hexToHsv(hex);\n\n            saturation = hsv['s'];\n\n            if (mostSaturated) {\n                oldHsv = this.hexToHsv(mostSaturated);\n            };\n\n            if (!mostSaturated || saturation > oldHsv['s']) {\n                mostSaturated = hex;\n            };\n        });\n\n        return `#${mostSaturated}`\n    },\n    colorMixer: function(hex1, hex2, percent) {\n        hex1 = this.hexValueSanitize(hex1);\n        hex2 = this.hexValueSanitize(hex2);\n        \n        if (hex1.length == 3) {\n            hex1 = hex1.repeat(hex1[0], 2) + hex1.repeat(hex1[1], 2) + hex1.repeat(hex1[2], 2);\n        };\n\n        if (hex2.length == 3) {\n            hex2 = hex2.repeat(hex2[0], 2) + hex2.repeat(hex2[1], 2) + hex2.repeat(hex2[2], 2);\n        };\n\n        let red_hex = this.decToHex((percent * this.hexToDec(hex1[0] + hex1[1]) + (100 - percent) * this.hexToDec(hex2[0] + hex2[1])) / 100).padStart(2, '0');\n        let green_hex = this.decToHex((percent * this.hexToDec(hex1[2] + hex1[3]) + (100 - percent) * this.hexToDec(hex2[2] + hex2[3])) / 100).padStart(2, '0');\n        let blue_hex =this.decToHex((percent * this.hexToDec(hex1[4] + hex1[5]) + (100 - percent) * this.hexToDec(hex2[4] + hex2[5])) / 100).padStart(2, '0');\n\n        return `#${red_hex+green_hex+blue_hex}`;\n    },\n    sortColors: function(colors, type) {\n        const input = colors.slice(0);\n        const output = [];\n      \n        while (input.length > 0) {\n          const color = this[type](input)\n          let index = input.indexOf(color);\n          if (index > -1) {\n            input.splice(index, 1);\n          }\n          output.push(color)\n        }\n        return output\n      },\n      mixSortColors: function(colors, type, mixcolor, percentage) {\n        const input = colors.slice(0)\n        const output = []\n\n        while (input.length > 0) {\n          const color = this[type](input)\n          let index = input.indexOf(color);\n          if (index > -1) {\n            input.splice(index, 1);\n          }\n          output.push(this.colorMixer(color, mixcolor, percentage))\n        }\n        return output\n      }\n}"]},"metadata":{},"sourceType":"script"}